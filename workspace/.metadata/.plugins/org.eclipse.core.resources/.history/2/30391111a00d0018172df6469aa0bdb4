<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.in28minutes.springboot</groupId>
	<artifactId>first-springboot-project</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>
	<!-- Maven manages dependencies in a better way rather than doing it manually -->
	<name>first-springboot-project</name>
    <description>first-springboot-project</description>
    
    <!-- starter parent manages versions for all dependencies where version is not mentioned - one of the advantage of parent -->
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.4.0.RELEASE</version>
	</parent>

	<properties>
	<!-- We are overriding java version here. In starter parent it is 1.6 by default  -->
		<java.version>1.8</java.version>
		<!-- <start-class>com.in28minutes.springboot.Application</start-class> -->
	<!-- To override any specific property coming from parent poms you can write it here E.g. it is comign from starter-web-->
		<!-- <hibernate-validator.version> </hibernate-validator.version> -->
		<hibernate-valida	
	</properties>

	<dependencies>
	<!--  Starter for to develop any (typical) web app, including RESTful, apps using Spring mvc.
		Uses Tomcat as default embedded container (server) - one of the dependencies inside it's own pom-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<!-- Version inherited from starter parent as 1.4.0. -->
			<!-- We can check in Maven Dependencies in Package Explorer mode - all the required jars downloaded when we save this file -->
		</dependency>
	</dependencies>
	
	<!-- What is auto configuration - Spring Boot (SB) looks for dependencies (jars) in classpath.
	 spring-boot-autoconfigure jar does this. For web - u can check org.springframework.boot.autoconfigure.web inside this jar in Package Explorer mode
	 We can see this while starting the SB app - Mappings for DispatcherServlet, Error page etc done automatically.
	E.g.
		Manually we used to configure DispatcherServlet required for spring mvc. It gets configured automatically,
		Whitelabel Error Page - for 404 - Page not found,
		Webjars,
		Logging etc  
	 -->

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
		<finalName>first-springboot-project</finalName>
	</build>
</project>