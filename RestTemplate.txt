
  Open Declaration   org.springframework.web.client.RestTemplate
RestTemplate -

Spring's central class for synchronous client-side HTTP access. It simplifies communication with HTTP servers, and enforces RESTful principles. It handles HTTP connections, leaving application code to provide URLs (with possible template variables) and extract results. 

Note: by default the RestTemplate relies on standard JDK facilities to establish HTTP connections. You can switch to use a different HTTP library such as Apache HttpComponents, Netty, and OkHttp through the setRequestFactory property. 

The main entry points of this template are the methods named after the six main HTTP methods: 

HTTP method

RestTemplate methods

DELETE delete 
GET getForObject 
 getForEntity 
HEAD headForHeaders 
OPTIONS optionsForAllow 
POST postForLocation 
 postForObject 
PUT put 
any exchange 
 execute 


In addition the exchange and execute methods are generalized versions of the above methods and can be used to support additional, less frequent combinations (e.g. HTTP PATCH, HTTP PUT with response body, etc.). Note however that the underlying HTTP library used must also support the desired combination. 

For each HTTP method there are three variants: two accept a URI template string and URI variables (array or map) while a third accepts a URI. Note that for URI templates it is assumed encoding is necessary, e.g. restTemplate.getForObject("http://example.com/hotel list") becomes "http://example.com/hotel%20list". This also means if the URI template or URI variables are already encoded, double encoding will occur, e.g. http://example.com/hotel%20list becomes http://example.com/hotel%2520list). To avoid that use a URI method variant to provide (or re-use) a previously encoded URI. To prepare such an URI with full control over encoding, consider using org.springframework.web.util.UriComponentsBuilder. 

Internally the template uses HttpMessageConverter instances to convert HTTP messages to and from POJOs. Converters for the main mime types are registered by default but you can also register additional converters via setMessageConverters. 

This template uses a org.springframework.http.client.SimpleClientHttpRequestFactory and a DefaultResponseErrorHandler as default strategies for creating HTTP connections or handling HTTP errors, respectively. These defaults can be overridden through setRequestFactory and setErrorHandler respectively.
Since:3.0Author:Arjen PoutsmaBrian ClozelRoy ClarksonJuergen HoellerSee Also:HttpMessageConverterRequestCallbackResponseExtractorResponseErrorHandlerAsyncRestTemplate



final RestTemplate rt = new RestTemplate();
            rt.getMessageConverters().add(new MappingJackson2HttpMessageConverter());
            rt.getMessageConverters().add(new StringHttpMessageConverter());
			
			
			final String returns = rt.getForObject(url + agentId, String.class, uriVariables);

            if (VARESTClient.LOGGER.isDebugEnabled()) {
                VARESTClient.LOGGER.debug("result:  " + returns);
            }

            return returns;